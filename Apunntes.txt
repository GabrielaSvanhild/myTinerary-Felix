Passport.js

const passport = require('passport')
const jwtStrategy  = require('passport-jwt').Strategy //metodo strategy para saber si el token es valido
const extractJwt =require('passport-jwt').ExtractJwt
const User = require('../models/User')

//passport es el policia=> usa la estrategia para acceder al token
module.exports= passport.use(new jwtStrategy({
//al policia passport le tengo que decir vos te vas encontrar ccon docs que son los token,
//le tengo que decir donde encuentra el token y como abrir(la llave) el token
jwtFromRequest: extractJwt.fromAuthHeaderAsBearerToken(),//aca le digo don le encuentro el token. fromAuthHeaderAsBearerToken es un metodo. en la cabacera
secretOrKey:process.env.SECRETKEY//la llave para abrir la caja secreta
},(payload,done)=>{
    User.findOne({_id: payload._doc._id})//le pregunta al modelo si tiene algun usuario que coincida
    .then(res=>{
        if(!res){
           return done(null,false)// no hay error por eso NULL no encuentra el usuario 
        }else{
            return(null,true)//encuentra el usuario
        }
    })
    .catch(error=> done(error,false))//hay error y false porque no encontro al usuario
}))


//payload es lo que encontro dentro de token
//done es una funcion para decirle que termine al prox controlador y le pasa los resultados

Index js
/* .get(
         passport.authenticate('jwt',{session:false}),//este middleWare te frena el paso si el token es malo
         isAdmin,//evalua si el usuario exite cuando el token existe pero no es Admin
         citiesControllers.obtenerTotalCities
      ) */
      /* EN EL FRONT CUANDO LE PEGUE,TENGO QUE PEDIR AL REDUX EL TOKEN
      console.log
      .get('ruta'),{ headers:{Authorization: 'Bearer' + props.token}} 
      EN LOS CONTRALADORES DE INFO PRIVADA, EN EL REQ.USER TE DEVUELVE EL OBJETO CON TODAS LAS PROPS
      PUEDO HACER OTRO MIDDLE WARE PARA VER SI EL USER ES ADMIN 
      isAdmin(req,res,next)


      GUARDAR USUARIO EN LA BASE DE DATOS!!
      EN EL BACK ANTES DE GUARDARLO EN LA BASE DE DATOS TENGO QUE SANITIZARLO
      PUEDO HACER UN MIDDLEWARE QUE SE LLAME VALIDATOR-SI SUPERA LAS VALIDACIONES
      NEXT QUE PASE AL CONTROLADOR. Y SINO EVALUO EN EL FRONT PARA QUE EL USUARIO LO CORRIJA EJ EL MIN DE LETRAS EN PASSWORD
      HACER LA VALIDACIONES CON JOI!!
      npm install joI
      ya no va a hacer falta poner required ni min ni max
      hay que usar joi  creas un esquema y le decis que te va a venir un objeto
      y ahi dentro le ponemos el nombres de las props=>ej:
      apellido:joi.string().trim().min(2).max(15).required()  {CONCATENACION DE METODOS}

      y como valor va concatenando las condiciones! la ultima prop es la prop messages,
      JOI => te devuelve un array de errores para poder usarlo esos errores a nivel front tengo que 
      desarrollar errores personalisados
   
      const squema=joi.object({
            apellido:joi.string().trim().min(2).max(15).required().messagges({ "string.empty: "tirate una clavee"})
      })'
      //{abortEarly:false}=>es para que evalue todos los errores, luego con la props messagges puedo hacer mis propios errores
      const validation= schema.validate(req.body, {abortEarly:false})
      if(!validation.error){
         next()
      }else{
         console.log(validation.error.details)=>es un array de objeto con 4 props message, path,etc..=>EL PATH ES EL CAMPO DEL PROBLEMA Y EL ERROR ES EL TIPO DE ERROR
      }
      */